{"version":3,"sources":["serviceWorker.js","components/api-handler.jsx","components/api-details.jsx","components/api-wrapper.jsx","index.js"],"names":["Boolean","window","location","hostname","match","CatList","props","state","cats","breeds","current_page","current_limit","total_items","search_id","HandleChange","e","queryString","target","value","setState","getSearchCatList","pageHandler","handleLoadMore","params","URLSearchParams","search","has","get","axios","then","res","data","q","limit","breed_id","page","className","forhtml","onChange","this","id","map","breed","key","name","length","cat","src","url","alt","to","total_page","Math","ceil","console","log","onClick","RenderCatList","RenderSelectedCatBreed","renderLoadMore","Component","CatDetails","details","i","j","origin","temperament","description","renderImage","CatMain","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b95f6193.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass CatList extends Component {\r\n    state = { \r\n        cats: [],\r\n        breeds: [],\r\n        current_page: 1,\r\n        current_limit: 10,\r\n        total_items: 0,\r\n        search_id:\"\"\r\n    }\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        const params = new URLSearchParams(props.location.search);\r\n        if(params.has('breed')){\r\n            this.getSearchCatList(params.get('breed'),10);\r\n            this.pageHandler(params.get('breed'));\r\n        }\r\n\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://api.thecatapi.com/v1/breeds')\r\n            .then(res => {\r\n                const breeds = res.data;\r\n                this.setState({ breeds });\r\n            });\r\n    };\r\n\r\n    getSearchCatList(q,limit){\r\n        \r\n        axios.get('https://api.thecatapi.com/v1/images/search', { params:{  \r\n            breed_id: q,\r\n            page: 1,\r\n            limit: limit \r\n        }})\r\n        .then(res => {\r\n            this.setState({cats: res.data});\r\n            this.setState({search_id:q});\r\n        })\r\n    }\r\n\r\n    HandleChange = (e) =>{\r\n        const queryString = e.target.value;\r\n        this.setState({search_id:queryString});\r\n        if(e.target.value === \"\") {\r\n            this.setState({cats: []});\r\n            \r\n        }else{\r\n            this.setState({current_page: 1 });\r\n            this.getSearchCatList(queryString,10);\r\n            this.pageHandler(queryString);\r\n        }\r\n    };\r\n\r\n    handleLoadMore = () =>{\r\n        const {current_page,current_limit,search_id} = this.state;\r\n        this.setState({current_page:  current_page + 1 });\r\n        this.getSearchCatList(search_id,current_limit + 10);\r\n    }\r\n\r\n\r\n    RenderCatList(){\r\n        return (\r\n            <div className=\"col-md-3 col-sm-6 col-12\">\r\n                <div className=\"form-group\">\r\n                    <label forhtml=\"selectBreed\">Breed: </label>\r\n                    <select onChange={ this.HandleChange } id=\"selectBreed\" className=\"form-control\" value={this.state.search_id}>\r\n                        <option value=\"\">Select a Breed</option>\r\n                        { this.state.breeds.map(breed => <option key={breed.id} value={breed.id}> {breed.name} </option>) }\r\n                    </select>\r\n                </div>    \r\n            </div>\r\n        );\r\n    };\r\n\r\n    RenderSelectedCatBreed(){\r\n        if(this.state.cats.length === 0){\r\n            return <h3>No Cats Available</h3>;\r\n        }else{\r\n            return (\r\n                <div className=\"row row-cols-4\">\r\n                        { this.state.cats.map(cat => (\r\n                            <div className=\"col\" key={cat.id}>\r\n                                <div className=\"card\">\r\n                                    <img src={cat.url} className=\"card-img-top grid-card-img\" alt=\"...\"/>\r\n                                    <div className=\"card-body\">\r\n                                       <Link to={`/${cat.id}`} className=\"btn btn-primary\">View</Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>                     \r\n                        ))}\r\n                </div>     \r\n            );\r\n        }\r\n              \r\n    };\r\n\r\n    pageHandler(q){\r\n        axios.get('https://api.thecatapi.com/v1/images/search', { params:{  \r\n            breed_id: q,\r\n            page: 1,\r\n            limit: 100 \r\n        }})\r\n        .then(res => {\r\n            this.setState({total_items: res.data.length});\r\n        })\r\n    }\r\n\r\n    renderLoadMore(){\r\n        const { total_items, current_page } = this.state\r\n        let total_page = 0;\r\n        let limit = 10;\r\n        if(total_items !== 0 && total_items > 10){\r\n            total_page = Math.ceil(total_items/limit);\r\n            console.log(current_page);\r\n            if(current_page !== total_page){\r\n                return (\r\n                    <div>\r\n                        <button onClick={this.handleLoadMore} className=\"btn btn-success\">Load More</button>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (                     \r\n                <div className=\"container\">\r\n                    <h1>Cat Browser</h1>\r\n                    <div className=\"col-lg\">\r\n                        { this.RenderCatList() }\r\n                        { this.RenderSelectedCatBreed() }\r\n                        { this.renderLoadMore() }\r\n                    </div>\r\n                </div>\r\n          );\r\n    }\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nexport default CatList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass CatDetails extends Component {\r\n    state = { \r\n        id:0\r\n     }\r\n     constructor(props, {match}){\r\n         super(props, {match});\r\n         this.state = {\r\n                details:[],\r\n                id:props.match.params.id\r\n            };\r\n     }\r\n     componentDidMount(){\r\n        axios.get(`https://api.thecatapi.com/v1/images/${this.state.id}`)\r\n        .then(res => {\r\n            this.setState({details: [res.data]});\r\n        })\r\n     }\r\n     renderImage(){\r\n        return (\r\n           <div className=\"row\">\r\n               {this.state.details.map(({ url,breeds}, i) => {\r\n                    return (\r\n                        <div key={i} className=\"col\">\r\n                            { breeds.map(({id,name,origin,temperament,description},j) =>{\r\n                                return (\r\n                                    <div key={j}>\r\n                                       <div className=\"card\">\r\n                                            <div className=\"card-header\">\r\n                                               <Link to={`/?breed=${id}`} className=\"btn btn-primary\">Back</Link>\r\n                                            </div>\r\n                                            <img src={url} className=\"card-img-top\" alt=\"...\"/>\r\n                                            <div className=\"card-body\">\r\n                                                <h5 className=\"card-title\">Name: {name}</h5>\r\n                                                <h5 className=\"card-title\">Origin: {origin}</h5>\r\n                                                <h5 className=\"card-title\">Temperament:</h5>\r\n                                                <p className=\"card-text\">{temperament}</p>\r\n                                                <h5 className=\"card-title\">Description:</h5>\r\n                                                <p className=\"card-text\">{description}</p>\r\n                                                \r\n                                            </div>\r\n                                        </div>    \r\n                                    </div>    \r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}\r\n           </div>\r\n           \r\n        );\r\n     }\r\n    \r\n    render() { \r\n        return ( \r\n            <div className=\"container\">\r\n                {this.renderImage()}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default CatDetails;","import React, { Component } from 'react';\r\nimport CatList from './api-handler';\r\nimport CatDetails from './api-details';\r\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom';\r\n\r\nclass CatMain extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <Router>\r\n                <Switch>\r\n                 <Route path='/' exact component={CatList}/>\r\n                 <Route path='/?breed=:id' exact component={CatDetails}/>\r\n                 <Route path='/:id' exact component={CatDetails}/>\r\n                </Switch>\r\n            </Router>\r\n         );\r\n    }\r\n  \r\n}\r\n \r\nexport default CatMain;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport CatMain from './components/api-wrapper';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nReactDOM.render(<CatMain />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}